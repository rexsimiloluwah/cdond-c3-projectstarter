version: 2.1 

orbs:
  slack: circleci/slack@4.1

executors: 
  python: 
    docker: 
      - image: python:3.7-alpine3.11 
  
  aws: 
    docker: 
      - image: amazon/aws-cli

  node: 
    docker: 
      - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id: 
        type: string 

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            export WORKFLOW_ID=<< parameters.workflow_id >> 
            aws cloudformation delete-stack --stack-name udapeople-backend-${WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${WORKFLOW_ID}

jobs: 
  build-backend: 
    executor: node
    steps: 
      - checkout 
      - restore_cache: 
          keys: ['backend-build']
      - run: 
          name: Build Backend 
          command: | 
            cd backend 
            npm install 
            npm run build
      - save_cache: 
          paths: ['backend/node_modules']
          key: backend-build 
  
  build-frontend: 
    executor: node
    steps: 
      - checkout 
      - restore_cache: 
          keys: ['frontend-build']
      - run: 
          name: Build Frontend 
          command: | 
            cd frontend 
            npm install 
            npm run build 
      - save_cache: 
          paths: ['frontend/node_modules']
          key: frontend-build 

  test-frontend: 
    executor: node
    steps: 
      - checkout 
      - restore_cache: 
          keys: ['frontend-build']
      - run: 
          name: Test frontend 
          command: | 
            cd frontend 
            npm install 
            npm run test

  test-backend: 
    executor: node
    steps: 
      - checkout 
      - restore_cache: 
          keys: ['backend-build']
      - run: 
          name: Test backend 
          command: | 
            cd backend 
            npm install 
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  scan-frontend:
    executor: node
    steps: 
      - checkout 
      - restore_cache: 
          keys:
            - "frontend-build" 
      - run: 
          name: Scan frontend dependencies
          command: | 
            cd frontend 
            npm install 
            npm audit fix --audit-level=critical 

  scan-backend: 
    executor: node
    steps: 
      - checkout 
      - restore_cache: 
          keys: 
            - "backend-build"
      - run: 
          name: Scan backend dependencies
          command: | 
            cd backend 
            npm install 
            npm audit fix --audit-level=critical

  deploy-infrastructure: 
    executor: aws
    steps:
      - checkout 
      - run: yum install -y tar gzip
      - run: 
          name: Ensure back-end infrastructure exists 
          command: | 
            echo ${AWS_DEFAULT_REGION}
            aws cloudformation deploy --template-file .circleci/files/backend.yml --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople

      - run: 
          name: Ensure front-end infrastructure exists 
          command: | 
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople

      - run: 
          name: Add back-end ip to Ansible inventory 
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> .circleci/ansible/inventory.txt 

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    executor: python
    steps: 
      - checkout 
      - add_ssh_keys:
          fingerprints: ["25:44:64:a1:44:2f:6c:02:88:39:dc:a4:9f:36:2e:3c"]
          
      - attach_workspace:
          at: ~/

      # Install Dependencies
      - run: 
          name: Install dependencies 
          command: | 
            apk add --update ansible
            ansible --version
            pip install awscli
      
      - run: 
          name: View inventory.txt 
          command: |
            cat .circleci/ansible/inventory.txt

      # Run the Ansible playbook 
      - run: 
          name: Configure server
          command: | 
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
       
workflows:
  default: 
    jobs:
      - build-frontend 
      - build-backend
      - test-frontend:
          requires:
            - "build-frontend"
      - test-backend: 
          requires:
            - "build-backend"
      - scan-frontend: 
          requires:
            - "build-frontend"
      - scan-backend: 
          requires:
            - "build-backend"
      - deploy-infrastructure: 
          requires:
            - "test-frontend"
            - "test-backend"
            - "scan-frontend"
            - "scan-backend"
      - configure-infrastructure: 
          requires:
            - "deploy-infrastructure"